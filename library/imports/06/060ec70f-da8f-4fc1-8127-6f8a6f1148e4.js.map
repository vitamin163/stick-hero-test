{"version":3,"sources":["assets\\scripts\\Game.js"],"names":["cc","Class","Component","properties","newGroundPrefab","type","Prefab","redPointPrefab","stickPrefab","ground","Node","player","scoreDisplay","Label","gameoverDisplay","perfectDisplay","playerDestination","isMoving","touchStart","touchEnd","collision","stick","newGround","beyond","startPosition","onLoad","enabled","spawnStick","spawnNewGround","score","onEnable","node","once","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","off","calculateCollision","successAction","failAction","setScore","string","startCollisionPoint","x","width","endCollisionPoint","startCollisionRedPoint","data","endCollisionRedPoint","destination","height","isCollision","isPerfect","perfect","getTime","distance","speed","playerMoveTime","stickComebackTime","comebackTime","tween","delay","to","angle","call","position","v2","y","start","destroy","active","by","director","loadScene","randomInteger","min","max","rand","Math","random","floor","spawnRedPoint","instantiate","newStick","addChild","anchorY","getComponent","game","newRedPoint","minWidthNewGround","maxWidthNewGround","newGroundPos","getNewGroundPosition","time","newGroundWidth","groundY","minX","maxX","randX"],"mappings":"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","sourceRoot":"/","sourcesContent":["/* eslint-disable no-undef */\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    newGroundPrefab: {\n      default: null,\n      type: cc.Prefab,\n    },\n\n    redPointPrefab: {\n      default: null,\n      type: cc.Prefab,\n    },\n\n    stickPrefab: {\n      default: null,\n      type: cc.Prefab,\n    },\n\n    ground: {\n      default: null,\n      type: cc.Node,\n    },\n\n    player: {\n      default: null,\n      type: cc.Node,\n    },\n    scoreDisplay: {\n      default: null,\n      type: cc.Label,\n    },\n    gameoverDisplay: {\n      default: null,\n      type: cc.Label,\n    },\n    perfectDisplay: {\n      default: null,\n      type: cc.Label,\n    },\n    playerDestination: 'none',\n    isMoving: false,\n    touchStart: false,\n    touchEnd: false,\n    collision: false,\n    stick: null,\n    newGround: null,\n    beyond: -500,\n    startPosition: -300,\n  },\n\n  onLoad() {\n    this.gameoverDisplay.enabled = false;\n    this.perfectDisplay.enabled = false;\n    this.stick = this.spawnStick();\n    this.newGround = this.spawnNewGround();\n    this.score = 0;\n  },\n\n  onEnable() {\n    this.node.once(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n    this.node.once(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\n  },\n\n\n  onTouchStart() {\n    this.touchStart = true;\n    this.touchEnd = false;\n  },\n\n\n  onTouchEnd() {\n    this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n    this.touchStart = false;\n    this.touchEnd = true;\n    if (this.calculateCollision()) {\n      this.successAction();\n    } else {\n      this.failAction();\n    }\n  },\n\n  setScore() {\n    this.scoreDisplay.string = `Score: ${this.score}`;\n  },\n\n  calculateCollision() {\n    const startCollisionPoint = this.newGround.x - this.newGround.width / 2;\n    const endCollisionPoint = this.newGround.x + this.newGround.width / 2;\n    const startCollisionRedPoint = this.newGround.x - this.redPointPrefab.data.width / 2;\n    const endCollisionRedPoint = this.newGround.x + this.redPointPrefab.data.width / 2;\n    const destination = this.stick.x + this.stick.height;\n    const isCollision = destination >= startCollisionPoint && destination <= endCollisionPoint;\n    const isPerfect = destination >= startCollisionRedPoint && destination <= endCollisionRedPoint;\n    if (isCollision && !isPerfect) {\n      this.score += 1;\n    } else if (isPerfect) {\n      this.score += 2;\n      this.perfect = true;\n    }\n    return isCollision;\n  },\n\n  getTime(distance, speed = 500) {\n    return distance / speed;\n  },\n\n  successAction() {\n    const playerMoveTime = this.getTime(this.playerDestination - this.player.x);\n    const stickComebackTime = this.getTime(\n      (this.newGround.x - this.stick.x) + this.newGround.width / 2,\n    );\n    const comebackTime = this.getTime(this.newGround.x - this.startPosition);\n    cc.tween(this.stick).delay(0.3).to(0.4, { angle: -90 })\n      .call(() => {\n        this.perfectDisplay.enabled = this.perfect;\n        cc.tween(this.player).to(playerMoveTime,\n          { position: cc.v2(this.playerDestination, this.stick.y) })\n          .call(() => {\n            this.perfect = false;\n            this.perfectDisplay.enabled = false;\n            cc.tween(this.newGround)\n              .to(comebackTime, { position: cc.v2(this.startPosition, this.ground.y) })\n              .start();\n          })\n          .call(() => {\n            cc.tween(this.player)\n              .to(comebackTime, {\n                position: cc.v2(\n                  (this.startPosition + this.newGround.width / 2) - 20, this.stick.y,\n                ),\n              })\n              .start();\n          })\n          .call(() => {\n            cc.tween(this.stick)\n              .to(stickComebackTime,\n                {\n                  position: cc.v2(\n                    this.stick.x - (this.newGround.x - this.stick.x + this.newGround.width / 2\n                    ),\n                    this.stick.y,\n                  ),\n                })\n              .start();\n          })\n          .call(() => {\n            cc.tween(this.ground)\n              .to(comebackTime, { position: cc.v2(-800, this.ground.y) })\n              .call(() => {\n                this.ground.destroy();\n                this.ground = this.newGround;\n                this.stick.active = false;\n                this.stick = this.spawnStick();\n                this.newGround = this.spawnNewGround();\n                this.node.once(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n                this.node.once(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\n              })\n              .start();\n          })\n          .start();\n      })\n      .call(() => this.setScore()).start()\n      .start();\n  },\n\n  failAction() {\n    const playerMoveTime = this.getTime(this.stick.height);\n    cc.tween(this.stick).delay(0.3).to(0.4, { angle: -90 })\n      .call(() => {\n        cc.tween(this.player)\n          .to(playerMoveTime, { position: cc.v2(this.player.x + this.stick.height, this.stick.y) })\n          .call(() => { cc.tween(this.stick).to(0.4, { angle: -180 }).start(); })\n          .call(() => {\n            cc.tween(this.player).by(0.3, { position: cc.v2(0, -350) })\n              .call(() => { this.gameoverDisplay.enabled = true; })\n              .delay(1)\n              .call(() => cc.director.loadScene('game'))\n              .start();\n          })\n          .start();\n      })\n      .start();\n  },\n\n  randomInteger(min, max) {\n    const rand = min + Math.random() * (max + 1 - min);\n    return Math.floor(rand);\n  },\n\n  spawnRedPoint() {\n    return cc.instantiate(this.redPointPrefab);\n  },\n\n  spawnStick() {\n    const newStick = cc.instantiate(this.stickPrefab);\n    this.node.addChild(newStick);\n    newStick.anchorY = 0;\n    newStick.y = this.ground.y + this.ground.height / 2;\n    newStick.x = this.startPosition + this.ground.width / 2;\n    newStick.getComponent('Stick').game = this;\n    return newStick;\n  },\n\n  spawnNewGround() {\n    const newGround = cc.instantiate(this.newGroundPrefab);\n    newGround.x = 500;\n    newGround.y = this.ground.y;\n    this.node.addChild(newGround);\n    const newRedPoint = this.spawnRedPoint();\n    newGround.addChild(newRedPoint);\n    newRedPoint.y = this.ground.height / 2 - newRedPoint.height / 2;\n    const minWidthNewGround = 30;\n    const maxWidthNewGround = 150;\n    const newGroundPos = this.getNewGroundPosition(newGround.width);\n    newGround.width = this.randomInteger(minWidthNewGround, maxWidthNewGround);\n    this.playerDestination = (newGroundPos.x + newGround.width / 2) - 20;\n    const time = this.getTime(newGround.x - newGroundPos.x, 1000);\n    cc.tween(newGround).to(time, { position: newGroundPos }).start();\n    return newGround;\n  },\n\n\n  getNewGroundPosition(newGroundWidth) {\n    const groundY = this.ground.y;\n    const minX = -(this.node.width / 2) + 150 + (newGroundWidth / 2) + 5;\n    const maxX = (this.node.width / 2) - (newGroundWidth / 2);\n    const randX = this.randomInteger(minX, maxX);\n    return cc.v2(randX, groundY);\n  },\n\n});\n"]}